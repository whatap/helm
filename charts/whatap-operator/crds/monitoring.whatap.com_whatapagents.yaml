  /*
    Copyright 2025 whatapK8s.
    
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0
    
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
    */
    
    package v2alpha1
    
    import (
    corev1 "k8s.io/api/core/v1"
    metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
    )
    
    // EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
  // NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.
    
    // WhatapAgentSpec defines the desired state of WhatapAgent
    type WhatapAgentSpec struct {
    // License key for Whatap monitoring
    // +optional
    License string `json:"license,omitempty"`
    // Host address for Whatap server
    // +optional
    Host string `json:"host,omitempty"`
    // Port for Whatap server
    // +optional
    Port     string       `json:"port,omitempty"`
    Features FeaturesSpec `json:"features"`
  }

    type FeaturesSpec struct {
    Apm       ApmSpec       `json:"apm"`
    OpenAgent OpenAgentSpec `json:"openAgent"`
    K8sAgent  K8sAgentSpec  `json:"k8sAgent"`
  }

    // OpenAgentSpec defines the openAgent enablement and configuration
    type OpenAgentSpec struct {
    // +kubebuilder:default=false
    Enabled bool `json:"enabled"`
    // GlobalInterval defines the default scrape interval for all targets
    // +optional
    GlobalInterval string `json:"globalInterval,omitempty"`
    // GlobalPath defines the default metrics path for all targets
    // +optional
    GlobalPath string `json:"globalPath,omitempty"`
    // Targets defines the list of targets to scrape metrics from
    // +optional
    Targets []OpenAgentTargetSpec `json:"targets,omitempty"`
    // Labels to be added to the OpenAgent deployment
    // +optional
    Labels map[string]string `json:"labels,omitempty"`
    // Annotations to be added to the OpenAgent deployment
    // +optional
    Annotations map[string]string `json:"annotations,omitempty"`
    // PodLabels to be added to the OpenAgent pod template
    // +optional
    PodLabels map[string]string `json:"podLabels,omitempty"`
    // PodAnnotations to be added to the OpenAgent pod template
    // +optional
    PodAnnotations map[string]string `json:"podAnnotations,omitempty"`
    // Tolerations to be added to the OpenAgent pod
    // +optional
    Tolerations []corev1.Toleration `json:"tolerations,omitempty"`
    // Environment variables to be added to the OpenAgent container
    // +optional
    Envs []corev1.EnvVar `json:"envs,omitempty"`
  }

    // OpenAgentTargetSpec defines a target for the OpenAgent to scrape metrics from
    type OpenAgentTargetSpec struct {
    // TargetName is the name of the target
    TargetName string `json:"targetName"`
    // Type is the type of the target (ServiceMonitor, PodMonitor, or StaticEndpoints)
    // +kubebuilder:validation:Enum=ServiceMonitor;PodMonitor;StaticEndpoints
    Type string `json:"type"`
    // NamespaceSelector selects the namespaces to find the targets in
    NamespaceSelector NamespaceSelector `json:"namespaceSelector,omitempty"`
    // Selector selects the targets to scrape
    Selector PodSelector `json:"selector,omitempty"`
    // Endpoints defines the endpoints to scrape metrics from
    Endpoints []OpenAgentEndpoint `json:"endpoints,omitempty"`
    // MetricRelabelConfigs defines the metric relabeling configurations
    // +optional
    MetricRelabelConfigs []MetricRelabelConfig `json:"metricRelabelConfigs,omitempty"`
    
    // +kubebuilder:default=true
    Enabled bool `json:"enabled"`
  }

    // OpenAgentEndpoint defines an endpoint for the OpenAgent to scrape metrics from
    type OpenAgentEndpoint struct {
    // Port is the port to scrape metrics from
    Port string `json:"port"`
    // Path is the path to scrape metrics from
    // +optional
    Path string `json:"path,omitempty"`
    // Interval is the scrape interval for this endpoint
    // +optional
    Interval string `json:"interval,omitempty"`
    // Scheme is the HTTP scheme to use for scraping (http or https)
    // +optional
    Scheme string `json:"scheme,omitempty"`
    // TLSConfig defines the TLS configuration for the endpoint
    // +optional
    TLSConfig *TLSConfig `json:"tlsConfig,omitempty"`
  }

    // TLSConfig defines the TLS configuration for an endpoint
    type TLSConfig struct {
    // InsecureSkipVerify disables target certificate validation
    // +optional
    InsecureSkipVerify bool `json:"insecureSkipVerify,omitempty"`
  }

    // MetricRelabelConfig defines a metric relabeling configuration
    type MetricRelabelConfig struct {
    // SourceLabels is the list of source labels to use in the relabeling
    // +optional
    SourceLabels []string `json:"source_labels,omitempty"`
    // Regex is the regular expression to match against the source labels
    // +optional
    Regex string `json:"regex,omitempty"`
    // TargetLabel is the label to set in the relabeling
    // +optional
    TargetLabel string `json:"target_label,omitempty"`
    // Replacement is the replacement value for the target label
    // +optional
    Replacement string `json:"replacement,omitempty"`
    // Action is the relabeling action to perform
    // +optional
    Action string `json:"action,omitempty"`
  }

    type K8sAgentSpec struct {
    Namespace string `json:"namespace,omitempty"`
    // AgentImageName defines the name of the agent image to use
    // +optional
    AgentImageName      string                   `json:"agentImageName,omitempty"`
    AgentImageVersion   string                   `json:"agentImageVersion,omitempty"`
    MasterAgent         MasterAgentComponentSpec `json:"masterAgent"`
    NodeAgent           NodeAgentComponentSpec   `json:"nodeAgent"`
    GpuMonitoring       AgentComponentSpec       `json:"gpuMonitoring"`
    ApiserverMonitoring AgentComponentSpec       `json:"apiserverMonitoring"`
    EtcdMonitoring      AgentComponentSpec       `json:"etcdMonitoring"`
    SchedulerMonitoring AgentComponentSpec       `json:"schedulerMonitoring"`
  }

    type MasterAgentComponentSpec struct {
    // +kubebuilder:default=false
    Enabled   bool                        `json:"enabled"`
    Resources corev1.ResourceRequirements `json:"resources,omitempty"`
    Envs      []corev1.EnvVar             `json:"envs,omitempty"`
    // Tolerations to be added to the MasterAgent pod
    // +optional
    Tolerations []corev1.Toleration `json:"tolerations,omitempty"`
    // Labels to be added to the MasterAgent deployment
    // +optional
    Labels map[string]string `json:"labels,omitempty"`
    // Annotations to be added to the MasterAgent deployment
    // +optional
    Annotations map[string]string `json:"annotations,omitempty"`
    // PodLabels to be added to the MasterAgent pod template
    // +optional
    PodLabels map[string]string `json:"podLabels,omitempty"`
    // PodAnnotations to be added to the MasterAgent pod template
    // +optional
    PodAnnotations map[string]string `json:"podAnnotations,omitempty"`
  }
    type NodeAgentComponentSpec struct {
    // +kubebuilder:default=false
    Enabled   bool                        `json:"enabled"`
    Resources corev1.ResourceRequirements `json:"resources,omitempty"`
    Envs      []corev1.EnvVar             `json:"envs,omitempty"`
    // Tolerations to be added to the NodeAgent pod
    // +optional
    Tolerations []corev1.Toleration `json:"tolerations,omitempty"`
    // Labels to be added to the NodeAgent daemonset
    // +optional
    Labels map[string]string `json:"labels,omitempty"`
    // Annotations to be added to the NodeAgent daemonset
    // +optional
    Annotations map[string]string `json:"annotations,omitempty"`
    // PodLabels to be added to the NodeAgent pod template
    // +optional
    PodLabels map[string]string `json:"podLabels,omitempty"`
    // PodAnnotations to be added to the NodeAgent pod template
    // +optional
    PodAnnotations map[string]string `json:"podAnnotations,omitempty"`
    // NodeAgentContainer defines configuration specific to the whatap-node-agent container
    // +optional
    NodeAgentContainer *ContainerSpec `json:"nodeAgentContainer,omitempty"`
    // NodeHelperContainer defines configuration specific to the whatap-node-helper container
    // +optional
    NodeHelperContainer *ContainerSpec `json:"nodeHelperContainer,omitempty"`
  }

    // ContainerSpec defines configuration for a specific container
    type ContainerSpec struct {
    // Resources defines the resource requirements for the container
    // +optional
    Resources corev1.ResourceRequirements `json:"resources,omitempty"`
    // Envs defines environment variables for the container
    // +optional
    Envs []corev1.EnvVar `json:"envs,omitempty"`
  }

    type AgentComponentSpec struct {
    // +kubebuilder:default=false
    Enabled bool `json:"enabled"`
  }

    // ApmSpec defines APM-specific settings
    type ApmSpec struct {
    Instrumentation InstrumentationSpec `json:"instrumentation"`
  }

    // InstrumentationSpec holds instrumentation targets
    type InstrumentationSpec struct {
    Targets []TargetSpec `json:"targets"`
  }

    type TargetSpec struct {
    Name              string            `json:"name"`
    Enabled           bool              `json:"enabled"`  // +kubebuilder:default=true
    Language          string            `json:"language"` // +kubebuilder:validation:Enum=java;python;php;dotnet;nodejs;golang
    WhatapApmVersions map[string]string `json:"whatapApmVersions"`
    NamespaceSelector NamespaceSelector `json:"namespaceSelector"`
    PodSelector       PodSelector       `json:"podSelector"`
    Config            ConfigSpec        `json:"config"`
  }

    // NamespaceSelector matches specific namespaces
    type NamespaceSelector struct {
    // matchNames is a list of namespace names to include
    // +optional
    MatchNames []string `json:"matchNames,omitempty"`
    // matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
    // map is equivalent to an element of matchExpressions, whose key field is "key", the
    // operator is "In", and the values array contains only "value". The requirements are ANDed.
    // +optional
    MatchLabels map[string]string `json:"matchLabels,omitempty"`
    // matchExpressions is a list of label selector requirements. The requirements are ANDed.
    // +optional
    MatchExpressions []LabelSelectorRequirement `json:"matchExpressions,omitempty"`
  }

    // PodSelector matches pods by labels
    type PodSelector struct {
    MatchLabels map[string]string `json:"matchLabels,omitempty"`
    // matchExpressions is a list of label selector requirements. The requirements are ANDed.
    // +optional
    MatchExpressions []LabelSelectorRequirement `json:"matchExpressions,omitempty"`
  }

    // A label selector requirement is a selector that contains values, a key, and an operator that
    // relates the key and values.
    type LabelSelectorRequirement struct {
    // key is the label key that the selector applies to.
    // +required
    Key string `json:"key"`
    // operator represents a key's relationship to a set of values.
    // Valid operators are In, NotIn, Exists and DoesNotExist.
    // +required
    Operator string `json:"operator"`
    // values is an array of string values. If the operator is In or NotIn,
    // the values array must be non-empty. If the operator is Exists or DoesNotExist,
    // the values array must be empty. This array is replaced during a strategic
    // merge patch.
    // +optional
    Values []string `json:"values,omitempty"`
  }

    // ConfigSpec holds custom configuration reference
    type ConfigSpec struct {
    // Mode can be "default" or "custom"
    // +kubebuilder:validation:Enum=default;custom
    Mode         string        `json:"mode,omitempty"`         // "default" or "custom"
    ConfigMapRef *ConfigMapRef `json:"configMapRef,omitempty"` // custom 모드일 때만 사용
  }

    // ConfigMapRef identifies a ConfigMap resource
    type ConfigMapRef struct {
    Name      string `json:"name"`
    Namespace string `json:"namespace"`
  }

    // WhatapAgentStatus defines the observed state of WhatapAgent
    type WhatapAgentStatus struct {
    // INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
  // Important: Run "make" to regenerate code after modifying this file
  }

    // +kubebuilder:object:root=true
    // +kubebuilder:subresource:status
    // +kubebuilder:resource:scope=Cluster
    // WhatapAgent is the Schema for the whatapagents API
    type WhatapAgent struct {
    metav1.TypeMeta   `json:",inline"`
    metav1.ObjectMeta `json:"metadata,omitempty"`
    
    Spec   WhatapAgentSpec   `json:"spec,omitempty"`
    Status WhatapAgentStatus `json:"status,omitempty"`
  }

    // +kubebuilder:object:root=true
    
    // WhatapAgentList contains a list of WhatapAgent
    type WhatapAgentList struct {
    metav1.TypeMeta `json:",inline"`
    metav1.ListMeta `json:"metadata,omitempty"`
    Items           []WhatapAgent `json:"items"`
  }

    func init() {
    SchemeBuilder.Register(&WhatapAgent{}, &WhatapAgentList{})
  }
